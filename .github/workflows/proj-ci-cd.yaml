name: Go Build and Upload to S3

# Run actions only on push to main
on:
  push:
    branches:
      - main

# Configure AWS Credentials
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-west-2
  ZIP_FILE_NAME: trimana-dashboard-api.zip
  S3_BUCKET_NAME: trimana-dashboard-bucket
  LAMBDA_FUNCTION_NAME: test-go


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    # Build go binary and package it in a zip file
    - name: Build and Package
      run: |
        GOOS=linux GOARCH=amd64 go build -tags lambda.norpc -o bootstrap main.go
        zip ${{ env.ZIP_FILE_NAME }} bootstrap

    # Upload zip artifact so that the s3 upload job can use it
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: lambda-package
        path: ${{ env.ZIP_FILE_NAME }}

  upload:
    runs-on: ubuntu-latest

    needs: build  # This ensures the 'build' job is completed before starting this job

    steps:
    # Download zip file that was uploaded from the build stage
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: lambda-package

    # Upload the zip file to the s3 bucket
    - name: Copy files to the test-prod S3 bucket
      run: |
        aws s3 cp $ZIP_FILE_NAME s3://$S3_BUCKET_NAME/lambdas/$ZIP_FILE_NAME

  update-lambda:
    runs-on: ubuntu-latest

    needs: upload

    # Push an update to the lambda function after the zip was uploaded in the last stage
    steps:
    - name: Update Lambda function
      run: |
        aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --s3-bucket $S3_BUCKET_NAME --s3-key lambdas/$ZIP_FILE_NAME